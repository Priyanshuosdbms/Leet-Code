class Solution {
    public int findMaxLength(int[] nums) {
        int n = nums.length;
        int maxLength = 0;
        int sum = 0;
        // Map to store the running sum and its corresponding index
        Map<Integer, Integer> map = new HashMap<>();
        // Initialize the map with an initial sum of 0 at index -1
        map.put(0, -1);

        for (int i = 0; i < n; i++) {
            // Increment sum by 1 for '1', and decrement by 1 for '0'
            sum += (nums[i] == 1 ? 1 : -1);
            // If the sum is already in the map, calculate the current subarray length
            if (map.containsKey(sum)) {
                maxLength = Math.max(maxLength, i - map.get(sum));
            } else {
                // Otherwise, add the current sum to the map
                map.put(sum, i);
            }
        }
        return maxLength;
    }
}
