/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
 /*
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode curr = head;
        ListNode curr_before = head;
        curr = curr.next;
        for(int i=n ; i>0 ; i--)
        {
            curr = curr.next;
            curr_before = curr_before.next;
        }

        curr_before = curr;
        return curr_before;

    }
}
*/
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        
        ListNode slow = dummy;
        ListNode fast = dummy;

        // Move the fast pointer n+1 steps ahead.
        for (int i = 0; i <= n; i++) {
            fast = fast.next;
        }

        // Move both the slow and fast pointers until the fast pointer reaches the end.
        while (fast != null) {
            slow = slow.next;
            fast = fast.next;
        }

        // Remove the nth node from the end.
        slow.next = slow.next.next;

        return dummy.next;
    }
}
