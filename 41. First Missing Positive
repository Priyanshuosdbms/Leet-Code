/*
class Solution {
    public int firstMissingPositive(int[] nums) {
        int n = nums.length;
        int mini = Integer.MAX_VALUE;
        int maxi = Integer.MIN_VALUE;
        int ans = 0;
        int sum = 0;
        for(int i=0 ; i<n ; i++)
        {
            maxi = Math.max(nums[i], maxi);
            mini = Math.min(nums[i], mini);
            sum += nums[i];
        }
        // 3 cases
        if(mini < 0 && maxi < 0)
        {
            int Sn = ((maxi - mini + 1)*(mini + maxi)) / 2;
            ans = Sn - sum;
        }
        else if(mini >= 0 && maxi >= 0)
        {
            int Sn = ((maxi - mini + 1)*(mini + maxi)) / 2;
            ans = Sn - sum;
        }
        else
        {
            mini = -mini;
            int nega = -((mini) * (mini + 1)) / 2;
            int posi = ((maxi) * (maxi+1)) / 2;
            ans = posi + nega - sum;
        }
        if(ans == 0)
        ans = maxi + 1;

        return ans;
    }
}
*/
class Solution {
    public int firstMissingPositive(int[] nums) {
        int n = nums.length;

        // Separate positive and non-positive numbers
        int positiveIndex = segregate(nums);

        // Check only positive numbers for missing integer
        for (int i = 0; i < positiveIndex; i++) {
            int index = Math.abs(nums[i]) - 1;
            if (index < positiveIndex) {
                nums[index] = -Math.abs(nums[index]);
            }
        }

        // Find the first missing positive integer
        for (int i = 0; i < positiveIndex; i++) {
            if (nums[i] > 0) {
                return i + 1;
            }
        }

        return positiveIndex + 1;
    }

    // Helper method to separate positive and non-positive numbers in-place
    private int segregate(int[] nums) {
        int n = nums.length;
        int positiveIndex = 0;

        for (int i = 0; i < n; i++) {
            if (nums[i] > 0) {
                // Swap positive numbers to the beginning
                int temp = nums[i];
                nums[i] = nums[positiveIndex];
                nums[positiveIndex] = temp;

                positiveIndex++;
            }
        }

        return positiveIndex;
    }
}
