/*
Solution 1: Priority Queue
class T {
  public long endTime;
  public int roomId;
  public T(long endTime, int roomId) {
    this.endTime = endTime;
    this.roomId = roomId;
  }
}

class Solution {
  public int mostBooked(int n, int[][] meetings) {
    int[] count = new int[n];

    Arrays.sort(meetings, (a, b) -> a[0] - b[0]);

    Queue<T> occupied =
        new PriorityQueue<>((a, b)
                                -> a.endTime == b.endTime ? Integer.compare(a.roomId, b.roomId)
                                                          : Long.compare(a.endTime, b.endTime));
    Queue<Integer> availableRoomIds = new PriorityQueue<>();

    for (int i = 0; i < n; ++i)
      availableRoomIds.offer(i);

    for (int[] meeting : meetings) {
      final int start = meeting[0];
      final int end = meeting[1];
      // Push meetings ending before this `meeting` in occupied to the
      // `availableRoomsIds`.
      while (!occupied.isEmpty() && occupied.peek().endTime <= start)
        availableRoomIds.offer(occupied.poll().roomId);
      if (availableRoomIds.isEmpty()) {
        T t = occupied.poll();
        ++count[t.roomId];
        occupied.offer(new T(t.endTime + (end - start), t.roomId));
      } else {
        final int roomId = availableRoomIds.poll();
        ++count[roomId];
        occupied.offer(new T(end, roomId));
      }
    }

    int maxIndex = 0;
    for (int i = 0; i < n; ++i)
      if (count[i] > count[maxIndex])
        maxIndex = i;
    return maxIndex;
  }
}
*/
/*
Solution 2: Sort and Priority Queue
class Solution {
    public int mostBooked1(int n, int[][] meetings) {
        Arrays.sort(meetings, (a,b)->a[0]-b[0]);
        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b) ->(a[0] == b[0] ? a[1]-b[1] : (a[0]-b[0])));
        int rooms[] = new int[n];
        int max = -1, idx = n;
        for(int i=0;i<n;i++){
            pq.add(new int[]{0, i});   
        }
        for(int i=0;i<meetings.length;i++){
            while(!pq.isEmpty() && meetings[i][0]>pq.peek()[0]){
                pq.add(new int[]{meetings[i][0], pq.poll()[1]});
            }
            int arr[] = pq.poll();
            rooms[arr[1]]++;
            if(rooms[arr[1]] > max || (rooms[arr[1]] == max && arr[1] < idx)){
                max = rooms[arr[1]];
                idx = arr[1];
            }
            //System.out.println("max: "+max+" idx: "+idx+" endTime: "+arr[0]);
            arr[0] = Math.max(arr[0], meetings[i][0]) + meetings[i][1] - meetings[i][0];
            pq.add(arr);
        }
        return idx;
    }
    public int mostBooked(int n, int[][] mt) {
        int[] cnt = new int[n];
        long[] t = new long[n];
        Arrays.sort(mt, (a, b)->a[0] - b[0]);
        for(int[] m : mt){
            int st = m[0], ed = m[1];
            boolean f = false;
            long min = Long.MAX_VALUE;
            int idx = -1;
            for(int i = 0; i < n; i++){
                if(t[i] < min){
                    min = t[i];
                    idx = i;
                }
                if(t[i] <= st){
                    t[i] = ed;
                    f = true;
                    cnt[i]++;
                    break;
                }
            }
            if(!f){
                t[idx] += (ed - st);
                cnt[idx]++;
            }
        }
        int max = 0, res = 0;
        for(int i = 0; i < n; i++){
            if(cnt[i] > max){
                max = cnt[i];
                res = i;
            }
        }
        return res;
    }
}
*/
// Solution 3: TreeSet and Priority Queue
class Solution {
    public int mostBooked(int n, int[][] M) {
        int m = M.length;
        Arrays.sort(M, (a,b)-> a[0]-b[0]);
        TreeSet<Integer> availableRooms = new TreeSet<>();
        for(int i=0;i<n;i++) {
            availableRooms.add(i);
        }
        PriorityQueue<int[]> curMeetings = new PriorityQueue<>((a,b) -> {
            if(a[0] == b[0]) {
                return a[1] - b[1];
            }
            return a[0] - b[0];
        });

        int ans[] = new int[n];

        for(int i=0;i<m;i++) {
            int curSt = M[i][0], curEnd = M[i][1];
            while(!curMeetings.isEmpty() && curMeetings.peek()[0] <= curSt) {
                availableRooms.add(curMeetings.poll()[1]);
            }
            if(availableRooms.isEmpty()) {
                int[] top = curMeetings.poll();
                int topEnd = top[0], topRoom = top[1];
                curEnd = topEnd + curEnd - curSt;
                availableRooms.add(topRoom);
            }
            int room = availableRooms.pollFirst();
            ans[room]++;
            curMeetings.offer(new int[]{curEnd, room});
        }

        int mxRoom=-1, mx =-1;
        for(int i=0;i<n;i++) {
            if(mx < ans[i]) {
                mx = ans[i];
                mxRoom = i;
            }
        }
        return mxRoom;
    }
}
